<!--
  ~ systransis AdmiRail Editor
  ~ Originator: systransis Ltd.
  ~
  ~ Copyright (c) by systransis Ltd.
  ~ All rights reserved.
  -->

<XMLSchemaMapDefinition basename="EditorConfigBase">
	<!-- root element for configuration -->
	<editor>
		<!--
		root element for pio configuration
		attribute "packageName": where the classes can be found
		-->
		<EditorPIOs packageName="String">
			<!--
			describes one PIO type
			attribute "className": the class this description belongs to
			-->
			<EditorPIO className="String">
				<!--
				The name of the file to save this PIO to
				-->
				<Filename filename="String" nocmd="true"/>
				<!--
				A PIOAttr ot the PIO type that has to be dumped
				attribute "xml_name": string used to dump this attribute
				attribute "default_value": value to use if the PIO doesn't have the PIOAttr
				attribute "type": the datatype of the PIOAttr ("String", "boolean", "int", "List", "Location", "Combo|a,b,c,...")
							long is used if the type is int
				attribute "always_dump_value": whether the value should be dumped as well if the value is the default value
				-->
				<EditorPIOAttr xml_name="String" default_value="String" type="String"
				               always_dump_value="boolean" nocmd="true"/>
				<!--
				To which layer this PIO belongs
				attribute "id": the id of the layer it belongs to
				attribute "extra_layer": a PIO might split its shapes into several extra layers (e.g. the VertexName). This attribute specifies which extra layer to use
				-->
				<EditorPIOLayer id="int" extra_layer="*int" nocmd="true"/>
				<!--
				describes how the PIO has to be displayed
				attribute "displayType": how to interpret the given Shapes / Texts. "default", "block" or "blocker". If not given, "default" will be used
				-->
				<Display displayType="*String" nocmd="true">
					<!--
					describes a single shape used to display the PIO
					attribute "shape": the shape used to display this item (Polyline, Rectangle, ...)
					attribute "extraLayer": the extraLayer to which the shape belongs
					attribute "selectionOnly": whether the shape should only be displayed when the PIO is selected
					-->
					<Shape shape="String" extra_layer="*int" selection_only="*boolean">
						<!--
						relative position to the anchor object (vertex or segment)
						attribute "x": x offset
						attribute "y": y offset
						-->
						<Position x="*double" y="*double" nocmd="true"/>
						<!--
						size of the shape (will be added to SizeRelative)
						attribute "width": width
						attribute "height": height
						-->
						<Size width="*double" height="*double" nocmd="true"/>
						<!--
						size of the shape relative to the bounding box (will be added to Size)
						attribute "width": width
						attribute "height": height
						-->
						<SizeRelative width="*double" height="*double" nocmd="true"/>
						<!--
						how to fill this shape
						attribute "color": the color used to fill the shape
						attribute "opacity": the opacity of this shape (0.0 -> translucent; 1.0 -> opaque)
						-->
						<Fill color="*String" opacity="*double" nocmd="true"/>
						<!--
						how to draw the stroke
						attribute "color": the color used to draw the stroke
						attribute "width": the width of the stroke
						-->
						<Stroke color="*String" width="*double" nocmd="true"/>
						<!--
						the rotation of the shape
						attribute "angle": the rotation in degrees
						attribute "autorotate": whether to rotate the shape to match the direction of the path
						-->
						<Rotation angle="*double" autorotate="*boolean" nocmd="true"/>
						<!--
						an additional flag that may or may not change the look of the shape
						attribute "name": the name of the flag
						attribute "value": the value of the flag
						attribute "type": the type of the flag. Default is String.
						-->
						<ShapeFlag name="String" value="String" type="*String" nocmd="true"/>
						<!--
						all states for which the shape should be displayed differently
						-->
						<States nocmd="true">
							<!--
							One state
							attribute "id": the id under which the value can be retrieved
							attribute "type": type of the state (boolean, integer, enum, String, ...)
							-->
							<State id="String" type="String">
								<!--
								describes how the shape should be displayed if this state using the given comparator to the value returns true
								it can have one or more children, only the present children will be applied, the rest stays as described above
								attribute "value": the value of the state
								attribute "value2": the second value for comparators with two values (e.g. '<<' (between): true iff value <= x <= value2)
								attribute "comparator": how to compare the state with the value (==, !=, >, >=, <, <=, <<)
								-->
								<StateValue value="String" value2="*String" comparator="String">
									<!--
									relative position to the anchor object (vertex or segment)
									attribute "x": x offset
									attribute "y": y offset
									-->
									<Position x="*double" y="*double" nocmd="true"/>
									<!--
									size of the shape (will be added to SizeRelative)
									attribute "width": width
									attribute "height": height
									-->
									<Size width="*double" height="*double" nocmd="true"/>
									<!--
									size of the shape relative to the bounding box (will be added to Size)
									attribute "width": width
									attribute "height": height
									-->
									<SizeRelative width="*double" height="*double" nocmd="true"/>
									<!--
									how to fill this shape
									attribute "color": the color used to fill the shape
									attribute "opacity": the opacity of this shape (0.0 -> translucent; 1.0 -> opaque)
									-->
									<Fill color="*String" opacity="*double" nocmd="true"/>
									<!--
									how to draw the stroke
									attribute "color": the color used to draw the stroke
									attribute "width": the width of the stroke
									-->
									<Stroke color="*String" width="*double" nocmd="true"/>
									<!--
									the rotation of the shape
									attribute "angle": the rotation in degrees
									attribute "autorotate": whether to rotate the shape to match the direction of the path
									-->
									<Rotation angle="*double" autorotate="*boolean" nocmd="true"/>
									<!--
									the font of the text
									attribute "name": name of the font
									attribute "size": size of the font
									-->
									<Font name="*String" size="*double" nocmd="true"/>
									<!--
									the content of the text
									attribute "text": content of the text
									use ${field_name} to replace it with the content of this field
									use ${field_name|/regex/} to use only part of the field (all capturing groups will be used)
									-->
									<Value text="*String" nocmd="true"/>
									<!--
									an additional flag that may or may not change the look of the shape
									attribute "name": the name of the flag
									attribute "value": the value of the flag
									attribute "type": the type of the flag. Default is String.
									-->
									<ShapeFlag name="String" value="String" type="*String"
									           nocmd="true"/>
								</StateValue>
							</State>
						</States>
					</Shape>
					<!--
					describes a single text used to display the PIO
					attribute "extraLayer": the extraLayer to which the shape belongs
					attribute "selectionOnly": whether the shape should only be displayed when the PIO is selected
					-->
					<Text text_id="String" extra_layer="*int" selection_only="*boolean">
						<!--
						relative position to the anchor object (vertex or segment)
						attribute "x": x offset
						attribute "y": y offset
						-->
						<Position x="*double" y="*double" nocmd="true"/>
						<!--
						how to fill the text
						attribute "color": the color used to fill the text
						attribute "opacity": the opacity of the text (0.0 -> translucent; 1.0 -> opaque)
						-->
						<Fill color="*String" opacity="*double" nocmd="true"/>
						<!--
						the rotation of the text
						attribute "angle": the rotation in degrees
						attribute "autorotate": whether to rotate the shape to match the direction of the path
						-->
						<Rotation angle="*double" autorotate="*boolean" nocmd="true"/>
						<!--
						the font of the text
						attribute "name": name of the font
						attribute "size": size of the font
						-->
						<Font name="*String" size="*double" nocmd="true"/>
						<!--
						the content of the text
						attribute "text": content of the text
						use ${field_name} to replace it with the content of this field
						use ${field_name|/regex/} to use only part of the field (all capturing groups will be used)
						-->
						<Value text="*String" nocmd="true"/>
						<!--
						all states for which the shape should be displayed differently
						-->
						<States nocmd="true">
							<!--
							One state
							attribute "id": the id under which the value can be retrieved
							attribute "type": type of the state (boolean, int, enum, string, ...)
							-->
							<State id="String" type="String">
								<!--
								describes how the shape should be displayed if this state using the given comparator to the value returns true
								it can have one or more children, only the present children will be applied, the rest stays as described above
								attribute "value": the value of the state
								attribute "value2": the second value for comparators with two values (e.g. '<<' (between): true iff value <= x <= value2)
								attribute "comparator": how to compare the state with the value (==, !=, >, >=, <, <=, <<)
								-->
								<StateValue value="String" value2="*String" comparator="String">
									<!--
									relative position to the anchor object (vertex or segment)
									attribute "x": x offset
									attribute "y": y offset
									-->
									<Position x="*double" y="*double" nocmd="true"/>
									<!--
									size of the shape (will be added to SizeRelative)
									attribute "width": width
									attribute "height": height
									-->
									<Size width="*double" height="*double" nocmd="true"/>
									<!--
									size of the shape relative to the bounding box (will be added to Size)
									attribute "width": width
									attribute "height": height
									-->
									<SizeRelative width="*double" height="*double" nocmd="true"/>
									<!--
									how to fill this shape
									attribute "color": the color used to fill the shape
									attribute "opacity": the opacity of this shape (0.0 -> translucent; 1.0 -> opaque)
									-->
									<Fill color="*String" opacity="*double" nocmd="true"/>
									<!--
									how to draw the stroke
									attribute "color": the color used to draw the stroke
									attribute "width": the width of the stroke
									-->
									<Stroke color="*String" width="*double" nocmd="true"/>
									<!--
									the rotation of the shape
									attribute "angle": the rotation in degrees
									attribute "autorotate": whether to rotate the shape to match the direction of the path
									-->
									<Rotation angle="*double" autorotate="*boolean" nocmd="true"/>
									<!--
									the font of the text
									attribute "name": name of the font
									attribute "size": size of the font
									-->
									<Font name="*String" size="*double" nocmd="true"/>
									<!--
									the content of the text
									attribute "text": content of the text
									use ${field_name} to replace it with the content of this field
									use ${field_name|/regex/} to use only part of the field (all capturing groups will be used)
									-->
									<Value text="*String" nocmd="true"/>
									<!--
									an additional flag that may or may not change the look of the shape
									attribute "name": the name of the flag
									attribute "value": the value of the flag
									attribute "type": the type of the flag. Default is String.
									-->
									<ShapeFlag name="String" value="String" type="*String"
									           nocmd="true"/>
								</StateValue>
							</State>
						</States>
					</Text>
					<!--
					describes the arrows used for directed PIOs
					attribute "extraLayer": the extraLayer to which the shape belongs
					attribute "selectionOnly": whether the shape should only be displayed when the PIO is selected
					-->
					<Arrow extra_layer="*int" selection_only="*boolean">
						<!--
						relative position to the anchor object (vertex or segment)
						attribute "x": x offset
						attribute "y": y offset
						-->
						<Position x="*double" y="*double" nocmd="true"/>
						<!--
						position of the arrow top
						attribute "relative": position relative to the length of the segment
						attribute "absolute": position from the start or end of the segment
						-->
						<ArrowPosition absolute="*double" relative="*double" nocmd="true"/>
						<!--
						size of the shape
						attribute "width": width
						attribute "height": height
						-->
						<Size width="*double" height="*double" nocmd="true"/>
						<!--
						how to fill this shape
						attribute "color": the color used to fill the shape
						attribute "opacity": the opacity of this shape (0.0 -> translucent; 1.0 -> opaque)
						-->
						<Fill color="*String" opacity="*double" nocmd="true"/>
						<!--
						how to draw the stroke
						attribute "color": the color used to draw the stroke
						attribute "width": the width of the stroke
						-->
						<Stroke color="*String" width="*double" nocmd="true"/>
						<!--
						the rotation of the shape
						attribute "angle": the rotation in degrees
						attribute "autorotate": whether to rotate the shape to match the direction of the path
						-->
						<Rotation angle="*double" autorotate="*boolean" nocmd="true"/>
					</Arrow>
				</Display>
			</EditorPIO>
		</EditorPIOs>
		<!--
		Describes how to display certain things in the editor
		-->
		<EditorDisplay>
			<!--
			fixed size of a TwinFigure
			attribute "ratio": ratio of width/height
			attribute "height": height
			-->
			<VertexSize ratio="double" height="double" nocmd="true"/>
			<!--
			Offsets in Y direction for the texts of a vertex
			attribute "vertexOffset": offset of the vertex name
			attribute "mileageOffset": offset of the mileage
			-->
			<VertexTextOffset vertexOffset="double" mileageOffset="double" nocmd="true"/>
			<!--
			how to fill a vertex according to its state
			attribute "neutralColor": fill of a normal vertex (read: a vertex that has no other defined fill)
			attribute "borderColor": fill of a vertex that is a border vertex (has no adjacents)
			attribute "fixedPositionColor": fill of a vertex that is pinned
			attribute "borderAndFixedPositionColor": fill of a vertex that is both a border vertex and pinned
			attribute "stroke": fill of the stroke around a vertex
			-->
			<VertexFill neutralColor="String" borderColor="String"
			            fixedPositionColor="String"
			            borderAndFixedPositionColor="String" stroke="String" nocmd="true"/>
			<!--
			how to fill the different "things" in the editor
			attribute "backgroundColor": fill of the background of the editor
			attribute "segmentColor": fill of a segment
			attribute "segmentJumpColor": fill of a jumping segment
			attribute "labelCollisionColor": fill of the stroke for found collisions
			attribute "selectionColor": fill used to display selection of a vertex and segment
			attribute "selectionStrokeColor": fill used for the stroke of a selection of a PIO
			attribute "selectionStrokeWidth": the width of the stroke of a selection of a PIO
			-->
			<EditorFill backgroundColor="String" segmentColor="String" segmentJumpColor="String"
			            segmentJumpTextColor="String" labelCollisionColor="String"
			            selectionColor="String" selectionStrokeColor="String" selectionStrokeWidth="double"
			            nocmd="true"/>
			<!--
			text sizes of text not defined above
			attribute "segmentJumpTextSize": size of the text for a jumping segment
			-->
			<TextSize segmentJumpTextSize="double" nocmd="true"/>
			<!--
			Distances used to layout the topology
			attribute "startX": position of the first placed vertex
			attribute "startY": position of the first placed vertex
			attribute "stepX": distance betweeen two vertexes
			attribute "stepY": distance between two vertexes
			attribute "border": distance between the border and the outermost vertexes
			attribute "gridX": number of positions within one step on the grid
			attribute "gridY": number of positions within one step on the grid
			-->
			<LayouterDistances startX="int" startY="int" stepX="int" stepY="int" border="int"
			                   gridX="int" gridY="int" nocmd="true"/>
			<!--
			Specifies different flags
			attribute "convertSSP": whether SSPs should be converted to the "new" format
			attribute "importComments": whether XML comments should be imported as comments objects
			-->
			<EditorFlags convertSSP="boolean" importComments="boolean" nocmd="true"/>
		</EditorDisplay>
		<!--
		Describes all available layers
		-->
		<EditorLayers>
			<!--
			Describes one layer
			attribute "id": the number of the layer, has to be unique
			attribute "sort": the number used to sort the layers in the view. The smaller the number the more to the front is the figure displayed.
			attribute "name": the name to display for this layer
			attribute "defaultVisible": Whether the layer should be visible per default
			-->
			<EditorLayer id="int" sort="int" name="String" defaultVisible="boolean"/>
			<!--
			Describes one layer set (knows the desired visibility state for all layers)
			attribute "name": the name of the layer set
			attribute "defaultVisible": the default for all layers
			-->
			<EditorLayerSet name="String" defaultVisible="boolean">
				<!--
				One layer that should not receive the default visibility state
				attribute "id": the id of the layer
				-->
				<EditorLayerSetNotDefault id="int" nocmd="true"/>
			</EditorLayerSet>
		</EditorLayers>
	</editor>
</XMLSchemaMapDefinition>
